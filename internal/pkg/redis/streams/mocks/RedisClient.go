// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import types "github.com/edgexfoundry/go-mod-messaging/v2/pkg/types"

// RedisClient is an autogenerated mock type for the RedisClient type
type RedisClient struct {
	mock.Mock
}

// AddToStream provides a mock function with given fields: stream, values
func (_m *RedisClient) AddToStream(stream string, values map[string]interface{}) error {
	ret := _m.Called(stream, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(stream, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *RedisClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadFromStream provides a mock function with given fields: stream
func (_m *RedisClient) ReadFromStream(stream string) ([]types.MessageEnvelope, error) {
	ret := _m.Called(stream)

	var r0 []types.MessageEnvelope
	if rf, ok := ret.Get(0).(func(string) []types.MessageEnvelope); ok {
		r0 = rf(stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.MessageEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
